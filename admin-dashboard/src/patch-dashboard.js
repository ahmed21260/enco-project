/**
 * Patch Dashboard ENCO - V√©rification et correction
 * V√©rifie la configuration Firebase, les routes et les composants
 */

import { db } from './firebaseConfig';
import { collection, getDocs, query, where, orderBy, limit } from 'firebase/firestore';

const BUCKET_CORRECT = "enco-prestarail.firebasestorage.app";
const COLLECTIONS_ATTENDUES = [
    'positions_operateurs',
    'positions_log', 
    'anomalies',
    'urgences',
    'checklists',
    'prises_poste',
    'photos',
    'operateurs',
    'bons_attachement'
];

export async function verifierConfigurationDashboard() {
    console.log("üîß V√©rification configuration dashboard...");
    
    // V√©rifier la config Firebase
    const config = db.app.options;
    console.log("üì¶ Config Firebase:", {
        projectId: config.projectId,
        storageBucket: config.storageBucket
    });
    
    if (config.storageBucket !== BUCKET_CORRECT) {
        console.warn(`‚ö†Ô∏è  Bucket incorrect! Attendu: ${BUCKET_CORRECT}, Actuel: ${config.storageBucket}`);
        return false;
    }
    
    console.log("‚úÖ Configuration Firebase correcte");
    return true;
}

export async function verifierCollectionsDashboard() {
    console.log("\nüìã V√©rification collections dashboard...");
    
    const stats = {};
    
    for (const collectionName of COLLECTIONS_ATTENDUES) {
        try {
            const querySnapshot = await getDocs(collection(db, collectionName));
            const count = querySnapshot.size;
            stats[collectionName] = count;
            
            console.log(`  ${count > 0 ? '‚úÖ' : '‚ö†Ô∏è'} ${collectionName}: ${count} documents`);
            
            if (count > 0) {
                // Afficher un exemple
                const firstDoc = querySnapshot.docs[0];
                const data = firstDoc.data();
                console.log(`    Exemple: ${firstDoc.id} - ${data.timestamp || 'N/A'}`);
            }
        } catch (error) {
            console.error(`  ‚ùå Erreur collection ${collectionName}:`, error);
            stats[collectionName] = 0;
        }
    }
    
    return stats;
}

export async function verifierDonneesTempsReel() {
    console.log("\nüîÑ V√©rification donn√©es temps r√©el...");
    
    try {
        // V√©rifier les positions actuelles
        const positionsQuery = query(
            collection(db, 'positions_operateurs'),
            orderBy('timestamp', 'desc'),
            limit(5)
        );
        const positionsSnapshot = await getDocs(positionsQuery);
        console.log(`  üìç Positions actuelles: ${positionsSnapshot.size} op√©rateurs`);
        
        // V√©rifier les anomalies non r√©solues
        const anomaliesQuery = query(
            collection(db, 'anomalies'),
            where('handled', '==', false)
        );
        const anomaliesSnapshot = await getDocs(anomaliesQuery);
        console.log(`  üö® Anomalies non r√©solues: ${anomaliesSnapshot.size}`);
        
        // V√©rifier les urgences non r√©solues
        const urgencesQuery = query(
            collection(db, 'urgences'),
            where('handled', '==', false)
        );
        const urgencesSnapshot = await getDocs(urgencesQuery);
        console.log(`  üõë Urgences non r√©solues: ${urgencesSnapshot.size}`);
        
        return {
            positions: positionsSnapshot.size,
            anomalies: anomaliesSnapshot.size,
            urgences: urgencesSnapshot.size
        };
    } catch (error) {
        console.error("‚ùå Erreur v√©rification temps r√©el:", error);
        return { positions: 0, anomalies: 0, urgences: 0 };
    }
}

export async function corrigerReferencesBucket() {
    console.log("\nüîß Correction r√©f√©rences bucket...");
    
    let corrections = 0;
    
    try {
        // Corriger les photos avec mauvaises URLs
        const photosSnapshot = await getDocs(collection(db, 'photos'));
        
        for (const doc of photosSnapshot.docs) {
            const data = doc.data();
            let updateNeeded = false;
            const updates = {};
            
            // Corriger les URLs de bucket
            if (data.url && !data.url.includes(BUCKET_CORRECT)) {
                updates.url = data.url.replace('default', BUCKET_CORRECT);
                updateNeeded = true;
                console.log(`  üîÑ Photo ${doc.id}: ${data.url} ‚Üí ${updates.url}`);
            }
            
            if (updateNeeded) {
                await doc.ref.update(updates);
                corrections++;
            }
        }
        
        console.log(`‚úÖ ${corrections} r√©f√©rences de bucket corrig√©es`);
    } catch (error) {
        console.error("‚ùå Erreur correction bucket:", error);
    }
    
    return corrections;
}

export async function genererRapportDashboard() {
    console.log("\n" + "="*60);
    console.log("üìä RAPPORT DASHBOARD - PATCH COMPLET");
    console.log("="*60);
    
    // 1. V√©rifier la configuration
    const configOk = await verifierConfigurationDashboard();
    
    // 2. V√©rifier les collections
    const statsCollections = await verifierCollectionsDashboard();
    
    // 3. V√©rifier les donn√©es temps r√©el
    const statsTempsReel = await verifierDonneesTempsReel();
    
    // 4. Corriger les r√©f√©rences si n√©cessaire
    if (configOk) {
        await corrigerReferencesBucket();
    }
    
    // 5. G√©n√©rer le rapport
    console.log("\nüìä R√©sum√©:");
    console.log(`  - Configuration: ${configOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - Collections avec donn√©es: ${Object.values(statsCollections).filter(c => c > 0).length}/${COLLECTIONS_ATTENDUES.length}`);
    console.log(`  - Op√©rateurs actifs: ${statsTempsReel.positions}`);
    console.log(`  - Anomalies en cours: ${statsTempsReel.anomalies}`);
    console.log(`  - Urgences en cours: ${statsTempsReel.urgences}`);
    
    // Actions recommand√©es
    console.log("\nüéØ Actions recommand√©es:");
    if (!configOk) {
        console.log("  - V√©rifier la configuration Firebase");
    }
    
    const collectionsVides = COLLECTIONS_ATTENDUES.filter(coll => statsCollections[coll] === 0);
    if (collectionsVides.length > 0) {
        console.log(`  - Collections vides: ${collectionsVides.join(', ')}`);
    }
    
    if (statsTempsReel.positions === 0) {
        console.log("  - Aucun op√©rateur actif d√©tect√©");
    }
    
    console.log("\n‚úÖ Rapport dashboard termin√©!");
    
    return {
        configOk,
        statsCollections,
        statsTempsReel,
        collectionsVides
    };
}

// Fonction pour ex√©cuter le patch complet
export async function executerPatchDashboard() {
    console.log("üöÄ D√©marrage du patch dashboard ENCO");
    console.log("="*50);
    
    try {
        const rapport = await genererRapportDashboard();
        return rapport;
    } catch (error) {
        console.error("‚ùå Erreur patch dashboard:", error);
        return null;
    }
}

// Export pour utilisation dans la console
if (typeof window !== 'undefined') {
    window.patchDashboard = executerPatchDashboard;
} 