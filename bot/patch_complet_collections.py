#!/usr/bin/env python3
"""
Patch complet ENCO - V√©rification et correction des collections Firestore
- V√©rifie toutes les collections et leurs donn√©es
- Corrige les r√©f√©rences de bucket
- V√©rifie les routes et configurations
- Restaure les donn√©es manquantes si n√©cessaire
"""

import os
import sys
import json
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv
load_dotenv()

# Ajouter le r√©pertoire bot au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from utils.firestore import db, USE_FIRESTORE
    print("‚úÖ Import Firestore OK")
except Exception as e:
    print(f"‚ùå Erreur import Firestore: {e}")
    sys.exit(1)

# Configuration
BUCKET_CORRECT = "enco-prestarail.firebasestorage.app"
COLLECTIONS_ATTENDUES = [
    'positions_operateurs',
    'positions_log', 
    'anomalies',
    'urgences',
    'checklists',
    'prises_poste',
    'photos',
    'operateurs',
    'bons_attachement'
]

def verifier_configuration():
    """V√©rifie la configuration Firebase"""
    print("\nüîß V√©rification de la configuration...")
    
    # V√©rifier les variables d'environnement
    bucket_env = os.getenv("FIREBASE_STORAGE_BUCKET")
    print(f"üì¶ Bucket configur√©: {bucket_env}")
    
    if bucket_env != BUCKET_CORRECT:
        print(f"‚ö†Ô∏è  Bucket incorrect! Attendu: {BUCKET_CORRECT}, Actuel: {bucket_env}")
        return False
    
    print(f"‚úÖ Bucket correct: {BUCKET_CORRECT}")
    return True

def lister_collections():
    """Liste toutes les collections disponibles"""
    print("\nüìã Collections disponibles dans Firestore:")
    
    if not USE_FIRESTORE or not db:
        print("‚ùå Firestore non initialis√©")
        return []
    
    collections = []
    try:
        for collection in db.collections():
            collections.append(collection.id)
            print(f"  - {collection.id}")
    except Exception as e:
        print(f"‚ùå Erreur lecture collections: {e}")
        return []
    
    return collections

def verifier_collection(collection_name):
    """V√©rifie une collection sp√©cifique"""
    print(f"\nüîç V√©rification collection: {collection_name}")
    
    if not db:
        print("‚ùå Firestore non initialis√©")
        return 0
    
    try:
        docs = list(db.collection(collection_name).stream())
        count = len(docs)
        print(f"  üìä Documents: {count}")
        
        if count > 0:
            # Afficher quelques exemples
            for i, doc in enumerate(docs[:3]):
                data = doc.to_dict()
                print(f"    Exemple {i+1}: {doc.id} - {data.get('timestamp', 'N/A')}")
        
        return count
    except Exception as e:
        print(f"  ‚ùå Erreur: {e}")
        return 0

def corriger_references_bucket():
    """Corrige les r√©f√©rences de bucket dans les donn√©es"""
    print("\nüîß Correction des r√©f√©rences de bucket...")
    
    if not db:
        print("‚ùå Firestore non initialis√©")
        return
    
    corrections = 0
    
    # V√©rifier les photos avec mauvaises URLs
    try:
        photos = db.collection('photos').stream()
        for doc in photos:
            data = doc.to_dict()
            update_needed = False
            
            # Corriger les URLs de bucket
            if 'url' in data and BUCKET_CORRECT not in data['url']:
                old_url = data['url']
                data['url'] = data['url'].replace('default', BUCKET_CORRECT)
                update_needed = True
                print(f"  üîÑ Photo {doc.id}: {old_url} ‚Üí {data['url']}")
            
            if update_needed:
                db.collection('photos').document(doc.id).update(data)
                corrections += 1
    except Exception as e:
        print(f"  ‚ùå Erreur correction photos: {e}")
    
    print(f"‚úÖ {corrections} r√©f√©rences de bucket corrig√©es")

def restaurer_donnees_test():
    """Restaure des donn√©es de test si les collections sont vides"""
    print("\nüîÑ Restauration de donn√©es de test...")
    
    if not db:
        print("‚ùå Firestore non initialis√©")
        return
    
    # V√©rifier si positions_operateurs est vide
    try:
        positions_count = len(list(db.collection('positions_operateurs').stream()))
        if positions_count == 0:
            print("  üìç Collection positions_operateurs vide, restauration...")
            
            # Cr√©er une position de test
            test_position = {
                "operateur_id": "1308750107",
                "operatorId": "1308750107", 
                "nom": "Tanjaoui212",
                "timestamp": datetime.now().isoformat(),
                "latitude": 49.436923,
                "longitude": 2.08554,
                "type": "prise_de_poste",
                "actif": True
            }
            
            db.collection('positions_operateurs').document("1308750107").set(test_position)
            print("  ‚úÖ Position de test restaur√©e")
    except Exception as e:
        print(f"  ‚ùå Erreur restauration positions: {e}")
    
    # V√©rifier si anomalies est vide
    try:
        anomalies_count = len(list(db.collection('anomalies').stream()))
        if anomalies_count == 0:
            print("  üö® Collection anomalies vide, restauration...")
            
            # Cr√©er une anomalie de test
            test_anomalie = {
                "operateur_id": "1308750107",
                "operatorId": "1308750107",
                "nom": "Tanjaoui212", 
                "timestamp": datetime.now().isoformat(),
                "description": "Test anomalie - Fuite hydraulique",
                "latitude": 49.436923,
                "longitude": 2.08554,
                "handled": False,
                "urgence_level": "NORMAL"
            }
            
            db.collection('anomalies').add(test_anomalie)
            print("  ‚úÖ Anomalie de test restaur√©e")
    except Exception as e:
        print(f"  ‚ùå Erreur restauration anomalies: {e}")

def verifier_dashboard_routes():
    """V√©rifie les routes du dashboard"""
    print("\nüåê V√©rification des routes dashboard...")
    
    # V√©rifier la configuration Firebase du dashboard
    dashboard_config_path = "../admin-dashboard/src/firebaseConfig.js"
    if os.path.exists(dashboard_config_path):
        print(f"  üìÅ Config dashboard trouv√©e: {dashboard_config_path}")
        try:
            with open(dashboard_config_path, 'r') as f:
                content = f.read()
                if BUCKET_CORRECT in content:
                    print("  ‚úÖ Bucket correct dans config dashboard")
                else:
                    print("  ‚ö†Ô∏è  Bucket incorrect dans config dashboard")
        except Exception as e:
            print(f"  ‚ùå Erreur lecture config dashboard: {e}")
    else:
        print("  ‚ùå Config dashboard non trouv√©e")

def generer_rapport(collections_disponibles, stats_collections):
    """G√©n√®re un rapport complet"""
    print("\n" + "="*60)
    print("üìä RAPPORT COMPLET - PATCH COLLECTIONS")
    print("="*60)
    
    print(f"\nüîß Configuration:")
    print(f"  - Bucket configur√©: {os.getenv('FIREBASE_STORAGE_BUCKET', 'NON D√âFINI')}")
    print(f"  - Bucket attendu: {BUCKET_CORRECT}")
    print(f"  - Firestore activ√©: {USE_FIRESTORE}")
    
    print(f"\nüìã Collections ({len(collections_disponibles)} trouv√©es):")
    for coll in COLLECTIONS_ATTENDUES:
        if coll in collections_disponibles:
            count = stats_collections.get(coll, 0)
            status = "‚úÖ" if count > 0 else "‚ö†Ô∏è"
            print(f"  {status} {coll}: {count} documents")
        else:
            print(f"  ‚ùå {coll}: MANQUANTE")
    
    print(f"\nüéØ Actions recommand√©es:")
    if not USE_FIRESTORE:
        print("  - Activer Firestore (ENCO_USE_FIRESTORE=1)")
    if os.getenv('FIREBASE_STORAGE_BUCKET') != BUCKET_CORRECT:
        print("  - Corriger FIREBASE_STORAGE_BUCKET")
    
    collections_vides = [coll for coll in COLLECTIONS_ATTENDUES if coll in collections_disponibles and stats_collections.get(coll, 0) == 0]
    if collections_vides:
        print(f"  - Collections vides √† v√©rifier: {', '.join(collections_vides)}")

def main():
    print("üöÄ D√©marrage du patch complet ENCO")
    print("="*50)
    
    # 1. V√©rifier la configuration
    config_ok = verifier_configuration()
    
    # 2. Lister les collections
    collections_disponibles = lister_collections()
    
    # 3. V√©rifier chaque collection attendue
    stats_collections = {}
    for collection in COLLECTIONS_ATTENDUES:
        if collection in collections_disponibles:
            count = verifier_collection(collection)
            stats_collections[collection] = count
    
    # 4. Corriger les r√©f√©rences de bucket
    if config_ok:
        corriger_references_bucket()
    
    # 5. Restaurer des donn√©es de test si n√©cessaire
    if config_ok:
        restaurer_donnees_test()
    
    # 6. V√©rifier les routes dashboard
    verifier_dashboard_routes()
    
    # 7. G√©n√©rer le rapport
    generer_rapport(collections_disponibles, stats_collections)
    
    print("\n‚úÖ Patch termin√©!")

if __name__ == '__main__':
    main() 